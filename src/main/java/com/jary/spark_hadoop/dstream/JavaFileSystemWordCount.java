package com.jary.spark_hadoop.dstream;

import java.util.Arrays;
import java.util.regex.Pattern;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import scala.Tuple2;

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the file System
 * every second.
 * 
 * Usage: JavaFileSystemWordCount <fileDir>
 */
@SuppressWarnings("serial")
public final class JavaFileSystemWordCount {
	private static final Pattern SPACE = Pattern.compile(" ");

	public static void main(String[] args) {
		if (args.length < 1) {
			System.err.println("Usage: JavaFileSystemWordCount <fileDir>");
			System.exit(1);
		}

		// Create the context with a 1 second batch size
		SparkConf sparkConf = new SparkConf()
				.setAppName("JavaNetworkWordCount");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf,
				Durations.seconds(1));

		// Create a JavaReceiverInputDStream on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		// Note that no duplication in storage level only for running locally.
		// Replication necessary in distributed scenario for fault tolerance.
		//JavaReceiverInputDStream<String> lines = ssc.socketTextStream(args[0],
		//		Integer.parseInt(args[1]), StorageLevels.MEMORY_AND_DISK_SER);
		
		//Create a JavaReceiverInputDStream,data source form file system;
		//the files are being continuously appended, the new data will not be read.
		JavaDStream<String> lines = ssc.textFileStream(args[0]);
		JavaDStream<String> words = lines
				.flatMap(new FlatMapFunction<String, String>() {

					public Iterable<String> call(String t) throws Exception {
						return Arrays.asList(SPACE.split(t));
					}

				});
		JavaPairDStream<String, Integer> wordCounts = words.mapToPair(
				new PairFunction<String, String, Integer>() {

					public Tuple2<String, Integer> call(String t)
							throws Exception {
						return new Tuple2<String, Integer>(t, 1);
					}

				}).reduceByKey(new Function2<Integer, Integer, Integer>() {

					public Integer call(Integer v1, Integer v2) throws Exception {
						return v1 + v2;
					}
				});

		wordCounts.print();
		ssc.start();
		ssc.awaitTermination();
		ssc.close();
	}
}